digraph DSAGraph {
    node [
        shape = "record"
    ]

    DSAGraph [
        label = <{DSAGraph
        |- _verticies: DSALinkedList
        <br align="left"/>|+ addVertex(label: Object, value: object) : None
        <br align="left"/>+ addEdge(label1: Object, label2: Object) : None
        <br align="left"/>+ hasVertex(label: Object) : bool
        <br align="left"/><u>+ render(gv: str, type: str) : None</u>
        <br align="left"/><u>+ readGraphFile(filename: str) : DSAGraph</u>
        <br align="left"/>+ display() : str
        <br align="left"/>+ getVertexCount() : int
        <br align="left"/>+ getEdgeCount(): int
        <br align="left"/>+ getVertex(label: Object): DSAGraphVertex
        <br align="left"/>+ getAdjacent(label: Object): DSALinkedList
        <br align="left"/>+ isAdjacent(label1: Object, label2: Object): bool
        <br align="left"/>+ displayAsList(): str
        <br align="left"/>+ displayAsMatrix(): str
        <br align="left"/>+ adjacencyMatrix(): ndarray
        <br align="left"/>+ depthFirstSearch(): DSAGraph
        <br align="left"/>+ breadthFirstSearch(): DSAGraph
        <br align="left"/>}>
    ]

    DSAGraphVertex [
        label = "{DSAGraphVertex
        |\l- _label: Object
        \l- _adjacent: DSALinkedList
        \l- _visited: bool
        \l- _value: Object\l
        |+ addEdge(vertex: DSAGraphVertex): None
        \l+ gv(): str
        \l+ __str__(): str
        \l+ __eq__(other: DSAGraphVertex): bool
        \l+ label: Object
        \l+ adjacent: DSALinkedList
        \l+ visited: bool
        \l+ value: Object\l}"
    ]

    TestDSAGraph [
        label = "{TestDSAGraph
        |+ testAddVertex(): None
        \l+ testVertexCount(): None
        \l+ testAdjacentEdge(): None
        \l+ testEdgeCount(): None
        \l+ testListDisplay(): None
        \l+ testMatrixDisplay(): None
        \l+ testDisplay(): None
        \l+ testReadGraphFile(): None
        \l+ testBFSandDFS(): None\l}"
    ]

    unittestTestCase [
        label = "{unittest.TestCase}"
    ]

    DSALinkedList [
        label = "{DSALinkedList|- _head: DSAListNode\l- _tail: DSAListNode\l- _insert(item: Object, before: DSAListNode): None\l- _remove(DSAListNode): Object\l- _find(Object): DSAListNode\l|+ isEmpty(): bool\l+ insertFirst(Object): None\l+ insertLast(Object): None\l+ insertBefore(item: Object, before: Object): None\l+ peekFirst(): Object\l+ peekLast(): Object\l+ removeFirst(): Object\l+ removeLast(): Object\l+ remove(Object): Object\l+ find(Object): bool\l+ __iter__(): Iterable\l}"
    ]

    DSAListNode [
        label = "{DSAListNode|- _data: Object\l- _next: DSAListNode\l- _prev: DSAListNode\l}"
    ]

    TestDSALinkedList [
        label = "{TestDSALinkedList|+ testConstructorIsEmpty(): None\l+ testSimpleInsertAndPeed(): None\l+ testIter(): None\l+ testFind(): None\l+ testAdvInsertDelete(): None\l+ testSerialization(): None\l}"
    ]
    edge [
        arrowhead = "diamond"
    ]
    DSAListNode -> DSALinkedList
    TestDSALinkedList -> DSALinkedList [arrowhead = "vee"]
    edge [
        arrowhead = "empty"
    ]
    TestDSALinkedList -> unittestTestCase

    TestDSAGraph -> DSAGraph [arrowhead = "vee"]
    DSAGraphVertex -> DSAGraph [arrowhead = "diamond"]
    TestDSAGraph -> unittestTestCase [arrowhead = "onormal"]

    DSALinkedList -> DSAGraph [arrowhead = "diamond"]
    DSALinkedList -> DSAGraphVertex [arrowhead = "diamond"]

    rankdir=BT
}
